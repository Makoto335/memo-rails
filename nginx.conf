# advance的な↓
# https://qiita.com/kidach1/items/985efebba639713c562e

# 設定の意味↓
# https://qiita.com/hclo/items/35f00b266506a707447e
# https://qiita.com/Anorlondo448/items/c0234b2a5bf51578c974#events

# user  nobody;
# ワーカープロセスを起動させるユーザー
worker_processes  1;
# ワーカープロセスのプロセス数

# マスタープロセス→制御
# ワーカー→複数起動可の実働部隊
# ps aux |grep nginx |grep -v grep 
# で調べられる

# https://www.netassist.ne.jp/techblog/13726/

# worker_rlimit_nofile
# ファイルディスクリプタ の上限値
# ファイルディスクリプタとは？
# ファイルを識別するための目印
# https://wa3.i-3-i.info/word14383.html
# 値はどのくらい？↓
# https://qiita.com/mikene_koko/items/85fbe6a342f89bf53e89

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;
# プロセスIDのログの場所
# ps
# で確認もできる


# Eventsモジュールの設定(最大コネクションなど)
events {
    worker_connections  1024;
}

# HTTP_XXXモジュールの設定(Webサーバとしての設定)
http {
    include       mime.types;
    # mime.typesファイルを読み込んでいる
    default_type  application/octet-stream;
    # どれにもマッチしない場合返すもの
    # https://paulownia.hatenablog.com/entry/2020/10/18/163104

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    server_tokens off;
    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    
    # サーバー定義を書いておくとproxy_passとして利用できる
    upstream api {
        # server localhost:3000;
        server unix:///app/tmp/sockets/puma.sock;
    }

    # upstream vue_app {
    #    server http://host.docker.internal:8080/;
    # }
    server {
        listen $PORT default_server;
        server_name '_';
        root /var/wwwwww/dummy;  # 無害なコンテンツが返される
    }

    # バーチャルホストの設定
    server {
        listen       $PORT; 
        server_name  test-rails.herokuapp.com;
        # localhostのサーバーネームできたらこの処理を使う

        access_log   /var/log/nginx/access.log;
        error_log   /var/log/nginx/error.log;
        client_max_body_size 3m;
        # 3mまでのファイルをアップロード許可

        #charset koi8-r;
        # access_log   /var/log/nginx/access.log;
        #access_log  logs/host.access.log  main;
        
        # location / {
        #     root   html;
        #     index  index.html index.htm;
        # }
        
        ########################################
        # リバースプロキシ関連の設定
        ########################################
        location / {
            proxy_pass https://vue-test-container.herokuapp.com;
            # プロキシされた（代理された）vueサーバにリクエストを飛ばします
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
        }
        # ↑が↓のパクリ。http_hostで大丈夫かと他のコードの意味わからないから要確認
        # https://computer-tb.co.jp/2022/06/22/nginxnext-jsrailspostgresql%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/

        # この設定のproxy_set_header Host $host;がHostヘッダをnginxで設定してやる指定になる。$hostはホスト名に置換されて、バックエンドへのアクセス時にHostヘッダに上書きされる。
        # https://www.xmisao.com/2013/10/17/nginx-proxy-host-header.html

            # proxyがヘッダーにホストのヘッダーをセットする、ってことかな？
            # $http_hostはリクエストヘッダのHTTP_HOSTの値
            # なんか脆弱らしいから$hostにした
            # https://word.pineapplefanboy.com/archives/417
            # https://qiita.com/hyakt/items/c0aa8005d9a9700fbe45
            # https://pgman.exblog.jp/8588344/
    

        location /api/ {
            # ------------------------------------
            proxy_set_header X-Real-IP $remote_addr;
    
            # アクセス元のIP。ネットワーク層の情報。
            # 基本的に直前のIPを保持しているので、

            # Client
            # ↓
            # ELB（ remote_addr は Client ）
            # ↓
            # Nginx（ remote_addr は ELB ）
            # ↓
            # API（ remote_addr は Nginx ）
            # これをヘッダーに加えるということ
            # ------------------------------------

            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # HTTPヘッダの一つ。ロードバランサやプロキシを経由する時に送信元を判別するために利用。アプリケーション層の情報。

            # Client
            # ↓　X-Forwarded-For: ""
            # Proxy1
            # ↓　X-Forwarded-For: "Client"
            # Proxy2
            # ↓　X-Forwarded-For: "Client, Proxy1"
            # ELB
            # ↓　X-Forwarded-For: "Client, Proxy1, Proxy2"
            # Nginx
            # ------------------------------------
            # https://christina04.hatenablog.com/entry/2016/10/25/190000

            proxy_set_header Host $host;
            proxy_pass http://api;
        }
        location /rails {
            proxy_pass http://api;
            proxy_set_header Host $host;
        }
        # location /active_storage_db {
        #     proxy_pass http://localhost/active_storage_db;
        #     proxy_set_header Host $http_host;
        # }
        # こっちはhostなんだな。わからん・・・
        # headerの設定をしないとクライアントからのアクセスじゃなくて、リバースプロキシからのアクセスが記録されてしまう
        # ということらしい
        # https://qiita.com/leomaro7/items/98d6af85a4e155449aed

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    include servers/*;
}
